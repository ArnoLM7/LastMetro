stages:
- lint
- test
- build

# Variables globales
variables:
  NODE_ENV: test
  DOCKER_IMAGE: registry.gitlab.com/arnolm7-group/lastmetro/dm-api
  npm_config_cache: "$CI_PROJECT_DIR/.npm"

# Cache pour acc√©l√©rer les builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - .npm/

# -----------------------------
# LINT STAGE
# -----------------------------

lint:
  stage: lint
  image: node:20-alpine
  script:
  - npm ci
  - npx eslint . --max-warnings=0
  only:
  - merge_requests
  - main

# -----------------------------
# TEST STAGE
# -----------------------------
test:
  stage: test
  image: node:20-alpine
  services:
  - name: postgres:15-alpine
    alias: last_metro_db_test
  variables:
    POSTGRES_USER: "last_metro_user_test"
    POSTGRES_PASSWORD: "last_metro_password_test"
    POSTGRES_DB: "last_metro_db_test"
    POSTGRES_HOST: "last_metro_db_test"
    POSTGRES_PORT: "5432"
    DB_HOST: "last_metro_db_test"
    DB_PORT: "5432"
  before_script:
  - apk add --no-cache bash postgresql-client
  - until pg_isready -h $DB_HOST -p $DB_PORT -U $POSTGRES_USER; do echo "Waiting for Postgres..."; sleep 1; done
  - export PGPASSWORD=$POSTGRES_PASSWORD
  - psql -h $DB_HOST -U $POSTGRES_USER -d $POSTGRES_DB -f db/schema.sql
  script:
  - echo "üì¶ Installation des d√©pendances..."
  - npm ci
  - echo "üß™ Lancement des tests unitaires et d'int√©gration..."
  - npm test
  only:
  - merge_requests
  - main

# --- Build + Push Docker ---
build_docker:
  stage: build
  image: docker:27.1.1
  services:
  - docker:27.1.1-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
  - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
  script:
  - docker build -t $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA -t $DOCKER_IMAGE:latest .
  - docker push $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
  - docker push $DOCKER_IMAGE:latest
  only:
  - main

# --- Security Scans ---
security:npm-audit:
  stage: test
  image: node:20-alpine
  script:
  - npm ci
  - npm audit --audit-level=moderate --json > npm-audit-report.json || true
  artifacts:
    when: always
    reports:
      dependency_scanning: npm-audit-report.json
    paths:
    - npm-audit-report.json
  allow_failure: true # Ne bloque pas le pipeline sur des vuln√©rabilit√©s faibles
  only:
  - merge_requests
  - main

security:trivy:
  stage: test
  image:
    name: docker:latest
  services:
  - docker:dind
  script:
  - apk add --no-cache curl
  - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
  - docker build -t dm-api:latest .
  - ./trivy image --format json --output trivy-report.json --severity HIGH,CRITICAL dm-api:latest || true
  artifacts:
    when: always
    reports:
      container_scanning: trivy-report.json
    paths:
    - trivy-report.json
  allow_failure: true
